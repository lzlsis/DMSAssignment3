
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Andy Li
 */
public class ChatJFrame extends JFrame implements ActionListener {

    /**
     * Creates new form ChatJFrame
     */
    private ChatInterface node;
    private String myAddress;
    private Timer timer;

    public ChatJFrame() throws UnknownHostException {
        initComponents();
        myAddress = Inet4Address.getLocalHost().getHostAddress();
        myHost.setText(myAddress);
        peerHost.setText("192.168.1.2");
        bSend.setEnabled(false);
        bLeave.setEnabled(false);
        bSend.addActionListener(this);
        bCreate.addActionListener(this);
        bJoin.addActionListener(this);
        bLeave.addActionListener(this);
        timer = new Timer(50, this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tHistory = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tMessage = new javax.swing.JTextArea();
        bSend = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        myHost = new javax.swing.JLabel();
        tPort = new javax.swing.JTextField();
        bCreate = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        peerHost = new javax.swing.JTextField();
        bJoin = new javax.swing.JButton();
        bLeave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tHistory.setColumns(20);
        tHistory.setRows(5);
        jScrollPane1.setViewportView(tHistory);

        tMessage.setColumns(20);
        tMessage.setRows(5);
        jScrollPane2.setViewportView(tMessage);

        bSend.setText("Send");

        jPanel1.setLayout(new java.awt.GridLayout(6, 1));

        myHost.setText("jLabel1");
        jPanel1.add(myHost);

        tPort.setText("1099");
        jPanel1.add(tPort);

        bCreate.setText("Create");
        jPanel1.add(bCreate);

        jLabel2.setText("OR");
        jPanel1.add(jLabel2);

        peerHost.setText("255.255.255.255");
        jPanel1.add(peerHost);

        bJoin.setText("Join");
        jPanel1.add(bJoin);

        bLeave.setText("Leave");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bSend)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bLeave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bLeave)
                        .addGap(0, 63, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSend)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ChatJFrame().setVisible(true);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(ChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCreate;
    private javax.swing.JButton bJoin;
    private javax.swing.JButton bLeave;
    private javax.swing.JButton bSend;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel myHost;
    private javax.swing.JTextField peerHost;
    private javax.swing.JTextArea tHistory;
    private javax.swing.JTextArea tMessage;
    private javax.swing.JTextField tPort;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == bCreate) {
            try {
                int port = Integer.parseInt(tPort.getText());
                node = new ChatRoom(port);
                bSend.setEnabled(true);
                bCreate.setEnabled(false);
                bJoin.setEnabled(false);
                bLeave.setEnabled(true);

                timer.start();
            } catch (NumberFormatException ex) {
                System.out.println("invalid port number");
            } catch (RemoteException ex) {
                Logger.getLogger(ChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (e.getSource() == bJoin) {
            Registry registry;
            try {
                registry = LocateRegistry.getRegistry(peerHost.getText());
//                registry = LocateRegistry.getRegistry("192.168.1.2");
                node = (ChatInterface) registry.lookup("chat");
                bSend.setEnabled(true);
                bCreate.setEnabled(false);
                bJoin.setEnabled(false);
                bLeave.setEnabled(true);

                timer.start();
            } catch (RemoteException ex) {
                Logger.getLogger(ChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NotBoundException ex) {
                Logger.getLogger(ChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (e.getSource() == bLeave) {
            node = null;
            bSend.setEnabled(false);
            bCreate.setEnabled(true);
            bJoin.setEnabled(true);

            timer.stop();
        } else if (e.getSource() == bSend) {
            try {
                node.createChat(myAddress + ": \n" + tMessage.getText());
                tMessage.setText("");
                updateChatBoard();
            } catch (RemoteException ex) {
                Logger.getLogger(ChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if (e.getSource() == timer) {
            try {
                updateChatBoard();
            } catch (RemoteException ex) {
                Logger.getLogger(ChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void updateChatBoard() throws RemoteException {
        if (node != null) {
            ArrayList<String> chatHistory = node.getChatHistory();
            final StringBuilder stringBuilder = new StringBuilder();
//            for (int i = 0; i < chatHistory.size() && i < 15;
//                    i++) {
//                stringBuilder.append(chatHistory.get(i));
//                stringBuilder.append("\n");
//            }
            for (String m : chatHistory) {
                stringBuilder.append(m);
                stringBuilder.append("\n");
            }
            tHistory.setText(stringBuilder.toString());
        }
    }
}
